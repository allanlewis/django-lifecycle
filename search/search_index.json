{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Django Lifecycle Hooks \u00b6 This project provides a @hook decorator as well as a base model and mixin to add lifecycle hooks to your Django models. Django's built-in approach to offering lifecycle hooks is Signals . However, my team often finds that Signals introduce unnecessary indirection and are at odds with Django's \"fat models\" approach. In short, you can write model code like this: from django_lifecycle import LifecycleModel , hook , BEFORE_UPDATE , AFTER_UPDATE class Article ( LifecycleModel ): contents = models . TextField () updated_at = models . DateTimeField ( null = True ) status = models . ChoiceField ( choices = [ 'draft' , 'published' ]) editor = models . ForeignKey ( AuthUser ) @hook ( BEFORE_UPDATE , when = 'contents' , has_changed = True ) def on_content_change ( self ): self . updated_at = timezone . now () @hook ( AFTER_UPDATE , when = \"status\" , was = \"draft\" , is_now = \"published\" ) def on_publish ( self ): send_email ( self . editor . email , \"An article has published!\" ) Instead of overriding save and __init__ in a clunky way that hurts readability: # same class and field declarations as above ... def __init__ ( self , * args , ** kwargs ): super () . __init__ ( * args , ** kwargs ) self . _orig_contents = self . contents self . _orig_status = self . status def save ( self , * args , ** kwargs ): if self . pk is not None and self . contents != self . _orig_contents ): self . updated_at = timezone . now () super () . save ( * args , ** kwargs ) if self . status != self . _orig_status : send_email ( self . editor . email , \"An article has published!\" ) Requirements \u00b6 Python (3.5+) Django (2.0+) Installation \u00b6 pip install django-lifecycle Getting Started \u00b6 Either extend the provided abstract base model class: from django_lifecycle import LifecycleModel , hook class YourModel ( LifecycleModel ): name = models . CharField ( max_length = 50 ) Or add the mixin to your Django model definition: from django.db import models from django_lifecycle import LifecycleModelMixin , hook class YourModel ( LifecycleModelMixin , models . Model ): name = models . CharField ( max_length = 50 ) (Optional) Add django_lifecycle to your INSTALLED_APPS \u00b6 INSTALLED_APPS = [ # ... \"django_lifecycle_checks\" , # ... ] This will raise an exception if you forget to add the mixin or extend the base model class. Read on to see more examples of how to use lifecycle hooks.","title":"Introduction"},{"location":"#django-lifecycle-hooks","text":"This project provides a @hook decorator as well as a base model and mixin to add lifecycle hooks to your Django models. Django's built-in approach to offering lifecycle hooks is Signals . However, my team often finds that Signals introduce unnecessary indirection and are at odds with Django's \"fat models\" approach. In short, you can write model code like this: from django_lifecycle import LifecycleModel , hook , BEFORE_UPDATE , AFTER_UPDATE class Article ( LifecycleModel ): contents = models . TextField () updated_at = models . DateTimeField ( null = True ) status = models . ChoiceField ( choices = [ 'draft' , 'published' ]) editor = models . ForeignKey ( AuthUser ) @hook ( BEFORE_UPDATE , when = 'contents' , has_changed = True ) def on_content_change ( self ): self . updated_at = timezone . now () @hook ( AFTER_UPDATE , when = \"status\" , was = \"draft\" , is_now = \"published\" ) def on_publish ( self ): send_email ( self . editor . email , \"An article has published!\" ) Instead of overriding save and __init__ in a clunky way that hurts readability: # same class and field declarations as above ... def __init__ ( self , * args , ** kwargs ): super () . __init__ ( * args , ** kwargs ) self . _orig_contents = self . contents self . _orig_status = self . status def save ( self , * args , ** kwargs ): if self . pk is not None and self . contents != self . _orig_contents ): self . updated_at = timezone . now () super () . save ( * args , ** kwargs ) if self . status != self . _orig_status : send_email ( self . editor . email , \"An article has published!\" )","title":"Django Lifecycle Hooks"},{"location":"#requirements","text":"Python (3.5+) Django (2.0+)","title":"Requirements"},{"location":"#installation","text":"pip install django-lifecycle","title":"Installation"},{"location":"#getting-started","text":"Either extend the provided abstract base model class: from django_lifecycle import LifecycleModel , hook class YourModel ( LifecycleModel ): name = models . CharField ( max_length = 50 ) Or add the mixin to your Django model definition: from django.db import models from django_lifecycle import LifecycleModelMixin , hook class YourModel ( LifecycleModelMixin , models . Model ): name = models . CharField ( max_length = 50 )","title":"Getting Started"},{"location":"#optional-add-django_lifecycle-to-your-installed_apps","text":"INSTALLED_APPS = [ # ... \"django_lifecycle_checks\" , # ... ] This will raise an exception if you forget to add the mixin or extend the base model class. Read on to see more examples of how to use lifecycle hooks.","title":"(Optional) Add django_lifecycle to your INSTALLED_APPS"},{"location":"advanced/","text":"Advanced Usage \u00b6 Utility Methods \u00b6 These are available on your model instance when the mixin or extend the base model is used. Method Details has_changed(field_name: str) -> bool Return a boolean indicating whether the field's value has changed since the model was initialized initial_value(field_name: str) -> bool Return the value of the field when the model was first initialized Example \u00b6 You can use these methods for more advanced checks, for example: from django_lifecycle import LifecycleModel , AFTER_UPDATE , hook class UserAccount ( LifecycleModel ): first_name = models . CharField ( max_length = 100 ) last_name = models . CharField ( max_length = 100 ) email = models . CharField ( max_length = 100 ) marital_status = models . CharField ( max_length = 100 ) @hook ( AFTER_UPDATE ) def on_name_change_heck_on_marital_status ( self ): if self . has_changed ( 'last_name' ) and not self . has_changed ( 'marital_status' ): send_mail ( to = self . email , \"Has your marital status changed recently?\" ) Suppressing Hooked Methods \u00b6 To prevent the hooked methods from being called, pass skip_hooks=True when calling save: account . save ( skip_hooks = True )","title":"Advanced"},{"location":"advanced/#advanced-usage","text":"","title":"Advanced Usage"},{"location":"advanced/#utility-methods","text":"These are available on your model instance when the mixin or extend the base model is used. Method Details has_changed(field_name: str) -> bool Return a boolean indicating whether the field's value has changed since the model was initialized initial_value(field_name: str) -> bool Return the value of the field when the model was first initialized","title":"Utility Methods "},{"location":"advanced/#example","text":"You can use these methods for more advanced checks, for example: from django_lifecycle import LifecycleModel , AFTER_UPDATE , hook class UserAccount ( LifecycleModel ): first_name = models . CharField ( max_length = 100 ) last_name = models . CharField ( max_length = 100 ) email = models . CharField ( max_length = 100 ) marital_status = models . CharField ( max_length = 100 ) @hook ( AFTER_UPDATE ) def on_name_change_heck_on_marital_status ( self ): if self . has_changed ( 'last_name' ) and not self . has_changed ( 'marital_status' ): send_mail ( to = self . email , \"Has your marital status changed recently?\" )","title":"Example"},{"location":"advanced/#suppressing-hooked-methods","text":"To prevent the hooked methods from being called, pass skip_hooks=True when calling save: account . save ( skip_hooks = True )","title":"Suppressing Hooked Methods "},{"location":"examples/","text":"Examples \u00b6 Here are some examples to illustrate how you can hook into specific lifecycle moments, optionally based on state transitions. Specific lifecycle moments \u00b6 For simple cases, you might always want something to happen at a certain point, such as after saving or before deleting a model instance. When a user is first created, you could process a thumbnail image in the background and send the user an email: @hook ( AFTER_CREATE ) def do_after_create_jobs ( self ): enqueue_job ( process_thumbnail , self . picture_url ) mail . send_mail ( 'Welcome!' , 'Thank you for joining.' , 'from@example.com' , [ 'to@example.com' ], ) Or you want to email a user when their account is deleted. You could add the decorated method below: @hook ( AFTER_DELETE ) def email_deleted_user ( self ): mail . send_mail ( 'We have deleted your account' , 'We will miss you!.' , 'customerservice@corporate.com' , [ 'human@gmail.com' ], ) Or if you want to enqueue a background job that depends on state being committed to your database @hook ( AFTER_CREATE , on_commit = True ) def do_after_create_jobs ( self ): enqueue_job ( send_item_shipped_notication , self . item_id ) Read on to see how to only fire the hooked method if certain conditions about the model's current and previous state are met. Transitions between specific values \u00b6 Maybe you only want the hooked method to run under certain circumstances related to the state of your model. If a model's status field change from \"active\" to \"banned\" , you may want to send an email to the user: @hook ( AFTER_UPDATE , when = 'status' , was = 'active' , is_now = 'banned' ) def email_banned_user ( self ): mail . send_mail ( 'You have been banned' , 'You may or may not deserve it.' , 'communitystandards@corporate.com' , [ 'mr.troll@hotmail.com' ], ) The was and is_now keyword arguments allow you to compare the model's state from when it was first instantiated to the current moment. You can also pass \"*\" to indicate any value - these are the defaults, meaning that by default the hooked method will fire. The when keyword specifies which field to check against. Preventing state transitions \u00b6 You can also enforce certain disallowed transitions. For example, maybe you don't want your staff to be able to delete an active trial because they should expire instead: @hook ( BEFORE_DELETE , when = 'has_trial' , is_now = True ) def ensure_trial_not_active ( self ): raise CannotDeleteActiveTrial ( 'Cannot delete trial user!' ) We've omitted the was keyword meaning that the initial state of the has_trial field can be any value (\"*\"). Any change to a field \u00b6 You can pass the keyword argument has_changed=True to run the hooked method if a field has changed. @hook ( BEFORE_UPDATE , when = 'address' , has_changed = True ) def timestamp_address_change ( self ): self . address_updated_at = timezone . now () When a field's value is NOT \u00b6 You can have a hooked method fire when a field's value IS NOT equal to a certain value. @hook ( BEFORE_SAVE , when = 'email' , is_not = None ) def lowercase_email ( self ): self . email = self . email . lower () When a field's value was NOT \u00b6 You can have a hooked method fire when a field's initial value was not equal to a specific value. @hook ( BEFORE_SAVE , when = 'status' , was_not = \"rejected\" , is_now = \"published\" ) def send_publish_alerts ( self ): send_mass_email () When a field's value changes to \u00b6 You can have a hooked method fire when a field's initial value was not equal to a specific value but now is. @hook ( BEFORE_SAVE , when = 'status' , changes_to = \"published\" ) def send_publish_alerts ( self ): send_mass_email () Generally, changes_to is a shorthand for the situation when was_not and is_now have the same value. The sample above is equal to: @hook ( BEFORE_SAVE , when = 'status' , was_not = \"published\" , is_now = \"published\" ) def send_publish_alerts ( self ): send_mass_email () Stacking decorators \u00b6 You can decorate the same method multiple times if you want to hook a method to multiple moments. @hook ( AFTER_UPDATE , when = \"published\" , has_changed = True ) @hook ( AFTER_CREATE , when = \"type\" , has_changed = True ) def handle_update ( self ): # do something Watching multiple fields \u00b6 If you want to hook into the same moment, but base its conditions on multiple fields, you can use the when_any parameter. @hook ( BEFORE_SAVE , when_any = [ 'status' , 'type' ], has_changed = True ) def do_something ( self ): # do something Going deeper with utility methods \u00b6 If you need to hook into events with more complex conditions, you can take advantage of has_changed and initial_value utility methods : @hook ( AFTER_UPDATE ) def on_update ( self ): if self . has_changed ( 'username' ) and not self . has_changed ( 'password' ): # do the thing here if self . initial_value ( 'login_attempts' ) == 2 : do_thing () else : do_other_thing ()","title":"Examples"},{"location":"examples/#examples","text":"Here are some examples to illustrate how you can hook into specific lifecycle moments, optionally based on state transitions.","title":"Examples"},{"location":"examples/#specific-lifecycle-moments","text":"For simple cases, you might always want something to happen at a certain point, such as after saving or before deleting a model instance. When a user is first created, you could process a thumbnail image in the background and send the user an email: @hook ( AFTER_CREATE ) def do_after_create_jobs ( self ): enqueue_job ( process_thumbnail , self . picture_url ) mail . send_mail ( 'Welcome!' , 'Thank you for joining.' , 'from@example.com' , [ 'to@example.com' ], ) Or you want to email a user when their account is deleted. You could add the decorated method below: @hook ( AFTER_DELETE ) def email_deleted_user ( self ): mail . send_mail ( 'We have deleted your account' , 'We will miss you!.' , 'customerservice@corporate.com' , [ 'human@gmail.com' ], ) Or if you want to enqueue a background job that depends on state being committed to your database @hook ( AFTER_CREATE , on_commit = True ) def do_after_create_jobs ( self ): enqueue_job ( send_item_shipped_notication , self . item_id ) Read on to see how to only fire the hooked method if certain conditions about the model's current and previous state are met.","title":"Specific lifecycle moments"},{"location":"examples/#transitions-between-specific-values","text":"Maybe you only want the hooked method to run under certain circumstances related to the state of your model. If a model's status field change from \"active\" to \"banned\" , you may want to send an email to the user: @hook ( AFTER_UPDATE , when = 'status' , was = 'active' , is_now = 'banned' ) def email_banned_user ( self ): mail . send_mail ( 'You have been banned' , 'You may or may not deserve it.' , 'communitystandards@corporate.com' , [ 'mr.troll@hotmail.com' ], ) The was and is_now keyword arguments allow you to compare the model's state from when it was first instantiated to the current moment. You can also pass \"*\" to indicate any value - these are the defaults, meaning that by default the hooked method will fire. The when keyword specifies which field to check against.","title":"Transitions between specific values"},{"location":"examples/#preventing-state-transitions","text":"You can also enforce certain disallowed transitions. For example, maybe you don't want your staff to be able to delete an active trial because they should expire instead: @hook ( BEFORE_DELETE , when = 'has_trial' , is_now = True ) def ensure_trial_not_active ( self ): raise CannotDeleteActiveTrial ( 'Cannot delete trial user!' ) We've omitted the was keyword meaning that the initial state of the has_trial field can be any value (\"*\").","title":"Preventing state transitions"},{"location":"examples/#any-change-to-a-field","text":"You can pass the keyword argument has_changed=True to run the hooked method if a field has changed. @hook ( BEFORE_UPDATE , when = 'address' , has_changed = True ) def timestamp_address_change ( self ): self . address_updated_at = timezone . now ()","title":"Any change to a field"},{"location":"examples/#when-a-fields-value-is-not","text":"You can have a hooked method fire when a field's value IS NOT equal to a certain value. @hook ( BEFORE_SAVE , when = 'email' , is_not = None ) def lowercase_email ( self ): self . email = self . email . lower ()","title":"When a field's value is NOT"},{"location":"examples/#when-a-fields-value-was-not","text":"You can have a hooked method fire when a field's initial value was not equal to a specific value. @hook ( BEFORE_SAVE , when = 'status' , was_not = \"rejected\" , is_now = \"published\" ) def send_publish_alerts ( self ): send_mass_email ()","title":"When a field's value was NOT"},{"location":"examples/#when-a-fields-value-changes-to","text":"You can have a hooked method fire when a field's initial value was not equal to a specific value but now is. @hook ( BEFORE_SAVE , when = 'status' , changes_to = \"published\" ) def send_publish_alerts ( self ): send_mass_email () Generally, changes_to is a shorthand for the situation when was_not and is_now have the same value. The sample above is equal to: @hook ( BEFORE_SAVE , when = 'status' , was_not = \"published\" , is_now = \"published\" ) def send_publish_alerts ( self ): send_mass_email ()","title":"When a field's value changes to"},{"location":"examples/#stacking-decorators","text":"You can decorate the same method multiple times if you want to hook a method to multiple moments. @hook ( AFTER_UPDATE , when = \"published\" , has_changed = True ) @hook ( AFTER_CREATE , when = \"type\" , has_changed = True ) def handle_update ( self ): # do something","title":"Stacking decorators"},{"location":"examples/#watching-multiple-fields","text":"If you want to hook into the same moment, but base its conditions on multiple fields, you can use the when_any parameter. @hook ( BEFORE_SAVE , when_any = [ 'status' , 'type' ], has_changed = True ) def do_something ( self ): # do something","title":"Watching multiple fields"},{"location":"examples/#going-deeper-with-utility-methods","text":"If you need to hook into events with more complex conditions, you can take advantage of has_changed and initial_value utility methods : @hook ( AFTER_UPDATE ) def on_update ( self ): if self . has_changed ( 'username' ) and not self . has_changed ( 'password' ): # do the thing here if self . initial_value ( 'login_attempts' ) == 2 : do_thing () else : do_other_thing ()","title":"Going deeper with utility methods"},{"location":"fk_changes/","text":"Watching Changes to ForeignKey Fields \u00b6 ForeignKey Reference Changes \u00b6 You can watch whether a foreign key reference changes by putting the name of the FK field in the when parameter: class Organization ( models . Model ): name = models . CharField ( max_length = 100 ) class UserAccount ( LifecycleModel ): username = models . CharField ( max_length = 100 ) email = models . CharField ( max_length = 600 ) employer = models . ForeignKey ( Organization , on_delete = models . SET_NULL ) @hook ( AFTER_UPDATE , when = \"employer\" , has_changed = True ) def notify_user_of_employer_change ( self ): mail . send_mail ( \"Update\" , \"You now work for someone else!\" , [ self . email ]) To be clear: This hook will fire when the value in the database column that stores the foreign key (in this case, organization_id ) changes. Read on to see how to watch for changes to fields on the related model . ForeignKey Field Value Changes \u00b6 You can have a hooked method fire based on the value of a field on a foreign key-related model using dot-notation: class Organization ( models . Model ): name = models . CharField ( max_length = 100 ) class UserAccount ( LifecycleModel ): username = models . CharField ( max_length = 100 ) email = models . CharField ( max_length = 600 ) employer = models . ForeignKey ( Organization , on_delete = models . SET_NULL ) @hook ( AFTER_UPDATE , when = \"employer.name\" , has_changed = True , is_now = \"Google\" ) def notify_user_of_google_buy_out ( self ): mail . send_mail ( \"Update\" , \"Google bought your employer!\" , [ \"to@example.com\" ],) If you use dot-notation , Please be aware of the potential performance hit : When your model is first initialized, the related model will be also be loaded in order to store the \"initial\" state of the related field. Models set up with these hooks should always be loaded using .select_related() , i.e. UserAccount.objects.select_related(\"organization\") for the example above. If you don't do this, you will almost certainly experience a major N+1 performance problem.","title":"Watching ForeignKey Changes"},{"location":"fk_changes/#watching-changes-to-foreignkey-fields","text":"","title":"Watching Changes to ForeignKey Fields"},{"location":"fk_changes/#foreignkey-reference-changes","text":"You can watch whether a foreign key reference changes by putting the name of the FK field in the when parameter: class Organization ( models . Model ): name = models . CharField ( max_length = 100 ) class UserAccount ( LifecycleModel ): username = models . CharField ( max_length = 100 ) email = models . CharField ( max_length = 600 ) employer = models . ForeignKey ( Organization , on_delete = models . SET_NULL ) @hook ( AFTER_UPDATE , when = \"employer\" , has_changed = True ) def notify_user_of_employer_change ( self ): mail . send_mail ( \"Update\" , \"You now work for someone else!\" , [ self . email ]) To be clear: This hook will fire when the value in the database column that stores the foreign key (in this case, organization_id ) changes. Read on to see how to watch for changes to fields on the related model .","title":"ForeignKey Reference Changes"},{"location":"fk_changes/#foreignkey-field-value-changes","text":"You can have a hooked method fire based on the value of a field on a foreign key-related model using dot-notation: class Organization ( models . Model ): name = models . CharField ( max_length = 100 ) class UserAccount ( LifecycleModel ): username = models . CharField ( max_length = 100 ) email = models . CharField ( max_length = 600 ) employer = models . ForeignKey ( Organization , on_delete = models . SET_NULL ) @hook ( AFTER_UPDATE , when = \"employer.name\" , has_changed = True , is_now = \"Google\" ) def notify_user_of_google_buy_out ( self ): mail . send_mail ( \"Update\" , \"Google bought your employer!\" , [ \"to@example.com\" ],) If you use dot-notation , Please be aware of the potential performance hit : When your model is first initialized, the related model will be also be loaded in order to store the \"initial\" state of the related field. Models set up with these hooks should always be loaded using .select_related() , i.e. UserAccount.objects.select_related(\"organization\") for the example above. If you don't do this, you will almost certainly experience a major N+1 performance problem.","title":"ForeignKey Field Value Changes"},{"location":"hooks_and_conditions/","text":"Available Hooks & Conditions \u00b6 You can hook into one or more lifecycle moments by adding the @hook decorator to a model's method. The moment name is passed as the first positional argument, @hook(BEFORE_CREATE) , and optional keyword arguments can be passed to set up conditions for when the method should fire. Decorator Signature \u00b6 @hook ( moment : str , when : str = None , when_any : List [ str ] = None , has_changed : bool = None , is_now : Any = '*' , is_not : Any = None , was : Any = '*' , was_not : Any = None , changes_to : Any = None , priority : int = DEFAULT_PRIORITY , on_commit : Optional [ bool ] = None ): Lifecycle Moments \u00b6 Below is a full list of hooks, in the same order in which they will get called during the respective operations: Hook constant Hook name When it fires BEFORE_SAVE before_save Immediately before save is called AFTER_SAVE after_save Immediately after save is called BEFORE_CREATE before_create Immediately before save is called, if pk is None AFTER_CREATE after_create Immediately after save is called, if pk was initially None BEFORE_UPDATE before_update Immediately before save is called, if pk is NOT None AFTER_UPDATE after_update Immediately after save is called, if pk was NOT None BEFORE_DELETE before_delete Immediately before delete is called AFTER_DELETE after_delete Immediately after delete is called All of hook constants are strings containing the specific hook name, for example AFTER_UPDATE is string \"after_update\" - preferably way is to use hook constant. Condition Keyword Arguments \u00b6 If you do not use any conditional parameters, the hook will fire every time the lifecycle moment occurs. You can use the keyword arguments below to conditionally fire the method depending on the initial or current state of a model instance's fields. Keyword arg Type Details when str The name of the field that you want to check against; required for the conditions below to be checked. Use the name of a FK field to watch changes to the related model reference or use dot-notation to watch changes to the values of fields on related models, e.g. \"organization.name\" . But please be aware of potential performance drawbacks. when_any List[str] Similar to the when parameter, but takes a list of field names. The hooked method will fire if any of the corresponding fields meet the keyword conditions. Useful if you don't like stacking decorators. has_changed bool Only fire the hooked method if the value of the when field has changed since the model was initialized is_now Any Only fire the hooked method if the value of the when field is currently equal to this value; defaults to * . is_not Any Only fire the hooked method if the value of the when field is NOT equal to this value was Any Only fire the hooked method if the value of the when field was equal to this value when first initialized; defaults to * . was_not Any Only fire the hooked method if the value of the when field was NOT equal to this value when first initialized. changes_to Any Only fire the hooked method if the value of the when field was NOT equal to this value when first initialized but is currently equal to this value. priority int Specify the priority, useful when some hooked methods depend on other ones. on_commit bool When True only fire the hooked method after the current database transaction has been commited or not at all. (Only applies to AFTER_* hooks)","title":"Lifecycle Moments & Conditions"},{"location":"hooks_and_conditions/#available-hooks-conditions","text":"You can hook into one or more lifecycle moments by adding the @hook decorator to a model's method. The moment name is passed as the first positional argument, @hook(BEFORE_CREATE) , and optional keyword arguments can be passed to set up conditions for when the method should fire.","title":"Available Hooks &amp; Conditions"},{"location":"hooks_and_conditions/#decorator-signature","text":"@hook ( moment : str , when : str = None , when_any : List [ str ] = None , has_changed : bool = None , is_now : Any = '*' , is_not : Any = None , was : Any = '*' , was_not : Any = None , changes_to : Any = None , priority : int = DEFAULT_PRIORITY , on_commit : Optional [ bool ] = None ):","title":"Decorator Signature"},{"location":"hooks_and_conditions/#lifecycle-moments","text":"Below is a full list of hooks, in the same order in which they will get called during the respective operations: Hook constant Hook name When it fires BEFORE_SAVE before_save Immediately before save is called AFTER_SAVE after_save Immediately after save is called BEFORE_CREATE before_create Immediately before save is called, if pk is None AFTER_CREATE after_create Immediately after save is called, if pk was initially None BEFORE_UPDATE before_update Immediately before save is called, if pk is NOT None AFTER_UPDATE after_update Immediately after save is called, if pk was NOT None BEFORE_DELETE before_delete Immediately before delete is called AFTER_DELETE after_delete Immediately after delete is called All of hook constants are strings containing the specific hook name, for example AFTER_UPDATE is string \"after_update\" - preferably way is to use hook constant.","title":"Lifecycle Moments"},{"location":"hooks_and_conditions/#condition-keyword-arguments","text":"If you do not use any conditional parameters, the hook will fire every time the lifecycle moment occurs. You can use the keyword arguments below to conditionally fire the method depending on the initial or current state of a model instance's fields. Keyword arg Type Details when str The name of the field that you want to check against; required for the conditions below to be checked. Use the name of a FK field to watch changes to the related model reference or use dot-notation to watch changes to the values of fields on related models, e.g. \"organization.name\" . But please be aware of potential performance drawbacks. when_any List[str] Similar to the when parameter, but takes a list of field names. The hooked method will fire if any of the corresponding fields meet the keyword conditions. Useful if you don't like stacking decorators. has_changed bool Only fire the hooked method if the value of the when field has changed since the model was initialized is_now Any Only fire the hooked method if the value of the when field is currently equal to this value; defaults to * . is_not Any Only fire the hooked method if the value of the when field is NOT equal to this value was Any Only fire the hooked method if the value of the when field was equal to this value when first initialized; defaults to * . was_not Any Only fire the hooked method if the value of the when field was NOT equal to this value when first initialized. changes_to Any Only fire the hooked method if the value of the when field was NOT equal to this value when first initialized but is currently equal to this value. priority int Specify the priority, useful when some hooked methods depend on other ones. on_commit bool When True only fire the hooked method after the current database transaction has been commited or not at all. (Only applies to AFTER_* hooks)","title":"Condition Keyword Arguments"}]}